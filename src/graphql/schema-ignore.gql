#registering user types
input RegisterUser {
  email: String!
  password: String!
  role: String!
}
type RegisterUserResponse {
  status: Int!
  message: String!
}
#login user types
input LoginUser {
  email: String!
  password: String!
}
type LoginUserResponse {
  status: Int!
  message: String!
  token: String
}

type isOnboardedResponse {
  status: Int!
  message: String!
}

#CREATE USERINFO
# categorical data
type PrivateUserInfo {
  email: String!
  role: String!
  onboard: Boolean!
  first_name: String
  last_name: String
  phone_number: String
  dob: String
}
type PublicUserInfo {
  first_name: String
  last_name: String
  role: String!
}
input AddUserInfo {
  first_name: String!
  last_name: String!
  phone_number: String!
  dob: String!
}
type AddUserInfoResponse {
  status: Int!
  message: String!
  private_info: PrivateUserInfo
}
#EDIT USER INFO
input EditUserInfo {
  first_name: String
  last_name: String
  phone_number: String
  dob: String
}
input FetchUserPublicInfo {
  user_id: Int!
}
type FetchUserPublicInfoResponse {
  status: Int!
  message: String!
  public_info: PublicUserInfo
}
type FetchUserPrivateInfoResponse {
  status: Int!
  message: String!
  private_info: PrivateUserInfo
}
type Query {
  isOnboarded: isOnboardedResponse!
  fetchUserPublicInfo(input: FetchUserPublicInfo): FetchUserPublicInfoResponse!
  fetchUserPrivateInfo: FetchUserPrivateInfoResponse!
}
type Mutation {
  addUserInfo(input: AddUserInfo): AddUserInfoResponse!
  registerUser(input: RegisterUser): RegisterUserResponse!
  loginUser(input: LoginUser): LoginUserResponse!
  editUserInfo(input: EditUserInfo): FetchUserPrivateInfoResponse!
}
