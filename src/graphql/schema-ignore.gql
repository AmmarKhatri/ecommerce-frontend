#registering user types
input RegisterUser {
  email: String!
  password: String!
  role: String!
}
type RegisterUserResponse {
  status: Int!
  message: String!
}
#login user types
input LoginUser {
  email: String!
  password: String!
}
type LoginUserResponse {
  status: Int!
  message: String!
  token: String
}

type isOnboardedResponse {
  status: Int!
  message: String!
}

#CREATE USERINFO
# categorical data
type PrivateUserInfo {
  email: String!
  role: String!
  onboard: Boolean!
  first_name: String
  last_name: String
  phone_number: String
  dob: String
}
type PublicUserInfo {
  first_name: String
  last_name: String
  role: String!
}
input AddUserInfo {
  first_name: String!
  last_name: String!
  phone_number: String!
  dob: String!
}
type AddUserInfoResponse {
  status: Int!
  message: String!
  private_info: PrivateUserInfo
}
#EDIT USER INFO
input EditUserInfo {
  first_name: String
  last_name: String
  phone_number: String
  dob: String
}
input FetchUserPublicInfo {
  user_id: Int!
}
type FetchUserPublicInfoResponse {
  status: Int!
  message: String!
  public_info: PublicUserInfo
}
type FetchUserPrivateInfoResponse {
  status: Int!
  message: String!
  private_info: PrivateUserInfo
}
#Product API calls
type Product {
  id: Int!
  seller_id: Int!
  name: String!
  description: String!
  image_url: String!
  price: Float!
  quantity: Int!
  created_at: String!
  updated_at: String!
}
input EnlistProduct {
  name: String!
  description: String!
  image_url: String!
  quantity: Int!
  price: Float!
}
type EnlistProductResponse {
  status: Int!
  message: String!
  product: Product
}
#remove product
input DelistProduct {
  id: Int!
}
type DelistProductResponse {
  status: Int!
  message: String!
}
#get enlisted products list
type GetEnlistedProductsResponse {
  status: Int!
  message: String!
  products: [Product!]
}

#change inventory
input ChangeInventory {
  product_id: Int!
  quantity: Int!
}
type ChangeInventoryResponse {
  status: Int!
  message: String!
}
type TrendingLatestProducts {
  status: Int!
  message: String!
  trending: [Product!]
  latest: [Product!]
}
#search product
input SearchProduct {
  text: String!
}
type SearchProductResponse {
  status: Int!
  message: String!
  products: [Product!]
}
#place an order
input PlaceOrder {
  cart: [[Int]!]!
}
type PlaceOrderResponse {
  status: Int!
  message: String!
  order_reference: Int
}
input FetchOrderItemsForBuyer {
  status: String!
}
type BuyerOrderItem {
  id: Int!
  product_id: Int!
  name: String!
  quantity: Int!
  status: String!
  order_reference: Int!
  price: Float!
  image_url: String!
}
type FetchOrderItemsForBuyerResponse {
  message: String!
  status: Int!
  orders: [BuyerOrderItem!]
}
input FetchOrderItemsForSeller {
  status: String!
}
type SellerOrderItem {
  id: Int!
  product_id: Int!
  name: String!
  buyer_name: String!
  quantity: Int!
  status: String!
  order_reference: Int!
  price: Float!
  image_url: String!
}
type FetchOrderItemsForSellerResponse {
  message: String!
  status: Int!
  orders: [SellerOrderItem!]
}
input HandleOrder {
  product_id: Int!
  order_id: Int!
  quantity: Int!
  deliver: Boolean!
}
type HandleOrderResponse {
  message: String!
  status: Int!
}
type Query {
  isOnboarded: isOnboardedResponse!
  fetchUserPublicInfo(input: FetchUserPublicInfo): FetchUserPublicInfoResponse!
  fetchUserPrivateInfo: FetchUserPrivateInfoResponse!
  getEnlistedProducts: GetEnlistedProductsResponse!
  fetchProducts: TrendingLatestProducts!
  searchProducts(input: SearchProduct): SearchProductResponse!
  fetchOrderItemsForBuyer(
    input: FetchOrderItemsForBuyer
  ): FetchOrderItemsForBuyerResponse!
  fetchOrderItemsForSeller(
    input: FetchOrderItemsForSeller
  ): FetchOrderItemsForSellerResponse!
}

type Mutation {
  addUserInfo(input: AddUserInfo): AddUserInfoResponse!
  registerUser(input: RegisterUser): RegisterUserResponse!
  loginUser(input: LoginUser): LoginUserResponse!
  editUserInfo(input: EditUserInfo): FetchUserPrivateInfoResponse!
  enlistProduct(input: EnlistProduct): EnlistProductResponse!
  delistProduct(input: DelistProduct): DelistProductResponse!
  changeInventory(input: ChangeInventory): ChangeInventoryResponse!
  placeOrder(input: PlaceOrder): PlaceOrderResponse!
  handleOrder(input: HandleOrder): HandleOrderResponse!
}
